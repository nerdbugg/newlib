#define COMP_DDC (16*2)
#define HC_PCC (16*3)
#define MON_DDC (16*4)
//5--6
#define RA  (16*7)
#define RET_COMP_PPC (16*11)
#define RET_COMP_DDC (16*12)

#define CAPF (16*10)
//#define SIM 1
//
.text

 // unsigned long c_out_3(unsigned long a0, unsigned long a1, unsigned long a2,
 // unsigned long a3)
.global c_out_3
.type c_out_3,%function
c_out_3:
		mv	t5, a0
		mv	a0, a1
		mv	a1, a2
		mv	a2, a3
		j	c_out

 // unsigned long c_out_2(unsigned long a0, unsigned long a1, unsigned long a2)
.global c_out_2
.type c_out_2,%function
c_out_2:
		mv	t5, a0
		mv	a0, a1
		mv	a1, a2
		j	c_out

 // unsigned long c_out_1(unsigned long a0, unsigned long a1)
.global c_out_1
.type c_out_1,%function
c_out_1:
		mv	t5, a0
		mv	a0, a1
		j	c_out
 
 // unsigned long c_out(unsigned long a0, unsigned long a1, unsigned long a2, 
 //	unsigned long a3, unsigned long a4, unsigned long a5, unsigned long a6, unsigned long a7)
.global c_out
.type c_out,%function
c_out:
		addi	sp, sp, -112
		sd	s2,  (8*2)(sp)
		sd	s3,  (8*3)(sp)
		sd	s4,  (8*4)(sp)
		sd	s5,  (8*5)(sp)
		sd	s6,  (8*6)(sp)
		sd	ra,  (8*7)(sp)
		sd	s0,  (8*8)(sp)

tt:
		// local_cap_store = the addr of global variable local_cap_store (in hostcalls.h) ;
		auipc	t0, %pcrel_hi(local_cap_store)    // R_RISCV_PCREL_HI20
		addi       t0, t0, %pcrel_lo(tt)
		ld	t0, 0(t0)

		lc	cs2, COMP_DDC(t0) //my ddc
		lc	cs3, HC_PCC(t0) //hostcall code sealed
		lc	cs4, MON_DDC(t0) //mon.ddc sealed

		lc	ct1, RET_COMP_DDC(t0)
		lc	ct0, RET_COMP_PPC(t0)

		cmove	ct2, cs2
		CInvoke cs3, cs4 // cs3 -> src/asm.S: tp_write 


// extern unsigned long ret_from_monitor();
.global ret_from_monitor
ret_from_monitor:
		ld	s2,  (8*2)(sp)
		ld	s3,  (8*3)(sp)
		ld	s4,  (8*4)(sp)
		ld	s5,  (8*5)(sp)
		ld	s6,  (8*6)(sp)
		ld	ra,  (8*7)(sp)
		ld	s0,  (8*8)(sp)
		addi	sp, sp, 112

		ret



//extern void copy_from_cap(void *dst, void *src_cap_location, int len);
.global copy_from_cap
.type copy_from_cap,%function
copy_from_cap:
		lc	ct1, 0(a1)
		add	a2, a0, a2

7:
		ld.cap a4, 0(ct1)
		sd a4, 0(a0)
		addi a0, a0, 8
		cincoffsetimm ct1, ct1, 8
		bltu a0, a2, 7b

		ret

